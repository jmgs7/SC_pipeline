all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(dplyr)
library(patchwork)
library(sctransform)
library(ggplot2)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(parallel) # detectCores()
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = detectCores())
list.dirs("../Output/")
list.dirs("../Output/",recursive = T)
list.dirs("../Output/",recursive = FALSE)
run_dirs <- list.dirs("../Output",recursive = FALSE)
run_dirs <- run_dirs[grepl("run",run_dirs)]
rds_objects <- unlist(lapply(run_dirs, function(x){list.files(path = run_dirs, pattern = "*rds")}))
rds_objects
rds_objects <- unlist(lapply(run_dirs, function(x){list.files(path = x, pattern = "*rds",full.names = T)}))
rds_objects <- lapply(run_dirs, function(x){list.files(path = x, pattern = "*rds",full.names = T)})
rds_objects <- lapply(run_dirs, function(x){
rds_file <- list.files(path = x, pattern = "*rds",full.names = T)
if (length(rds_files) > 1){
rds_obj <- readRDS(rds_file)
}
})
rds_objects <- lapply(run_dirs, function(x){
rds_file <- list.files(path = x, pattern = "*rds",full.names = T)
if (length(rds_file) > 0){
rds_obj <- readRDS(rds_file)
}
})
rds_objects <- lapply(run_dirs, function(x){
rds_file <- list.files(path = x, pattern = "*rds",full.names = T)
if (length(rds_file) > 0){
return(readRDS(rds_file))
} else{
return(NULL)
}
})
rds_objects[[3]]
rds_objects[sapply(rds_objects, is.null)] <- NULL
Reduce(function(x,y) merge(x,y,add.cell.ids = c(x@project.name,y@project.name)) , rds_objects)
merge_seurat_object <- Reduce(function(x,y) merge(x,y,add.cell.ids = c(x@project.name,y@project.name)) , rds_objects)
for (rds_object in rds_objects){
print(dim(rds_object))
}
print(dim(merge_seurat_object))
# remove run objects
rm(rds_object, rds_objects, run_dirs)
print(merge_seurat_object@meta.data)
print(merge_seurat_object$Cell_Type_Experimental)
merge_seurat_object@meta.data
merge_seurat_object@meta.data$orig.ident
run_dirs <- list.dirs("../Output",recursive = FALSE)
run_dirs <- run_dirs[grepl("run",run_dirs)]
x = run_dirs[1]
rds_file <- list.files(path = x, pattern = "*rds",full.names = T)
rds_object <- readRDS(rds_file)
rds_object@meta.data
basename(x)
run_dirs <- list.dirs("../Output",recursive = FALSE)
run_dirs <- run_dirs[grepl("run",run_dirs)]
rds_objects <- lapply(run_dirs, function(x){
rds_file <- list.files(path = x, pattern = "*rds",full.names = T)
if (length(rds_file) > 0){
rds_object <- readRDS(rds_file)
rds_object@meta.data$orig.ident <- basename(x)
return(rds_object)
} else{
return(NULL)
}
})
rds_objects[sapply(rds_objects, is.null)] <- NULL
merge_seurat_object <- Reduce(function(x,y) merge(x,y,add.cell.ids = c(x@project.name,y@project.name)) , rds_objects)
# check that the size is correct
for (rds_object in rds_objects){
print(dim(rds_object))
}
print(dim(merge_seurat_object))
# remove run objects
rm(rds_object, rds_objects, run_dirs)
# metadata of merged object
merge_seurat_object@meta.data$orig.ident
merge_seurat_object@meta.data
print(dim(merge_seurat_object))
unique(merge_seurat_object@meta.data$orig.ident)
DimPlot(merge_seurat_object)
DimPlot(merge_seurat_object, reduction = "pca")
merge_seurat_object <- SCTransform(merge_seurat_object, vst.flavor = "v2", vars.to.regress = c("percent.mt","orig.ident"))
merge_seurat_object <- RunPCA(merge_seurat_object, assay = "SCT")
DimPlot(merge_seurat_object, reduction = "pca") + NoLegend() # An unique PCA is not enough to separate cell groups.
DimPlot(merge_seurat_object, reduction = "pca") # An unique PCA is not enough to separate cell groups.
DimPlot(merge_seurat_object, reduction = "pca") # An unique PCA is not enough to separate cell groups.
Idents(merge_seurat_object) <- "orig.ident"
DimPlot(merge_seurat_object, reduction = "pca") # An unique PCA is not enough to separate cell groups.
ElbowPlot(run2.subset, ndims = 50)
ElbowPlot(merge_seurat_object, ndims = 50)
DimHeatmap(merge_seurat_object, dims = 1:30, balanced = TRUE)
VizDimLoadings(merge_seurat_object, dims = 1:30, reduction = "pca")
# Resolution fine-tuned in a separate Rmd.
merge_seurat_object <- FindNeighbors(merge_seurat_object, dims = 1:30)
merge_seurat_object <- FindClusters(merge_seurat_object, resolution = 0.8) # Default resolution = 0.8
merge_seurat_object <- RunUMAP(merge_seurat_object, dims = 1:30)
DimPlot(merge_seurat_object, reduction = "umap", label = TRUE)
# Visualize QC metrics as a violin plot
VlnPlot(merge_seurat_object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) + NoLegend()
# Zoom in on nFeature_RNA violin plot.
VlnPlot(merge_seurat_object, features = "nFeature_RNA", ncol = 1) + ylim(0, 2500) + NoLegend()
# Visualize relationships in metadata to detect outliers with FeatureScatter function
plot1 <- FeatureScatter(merge_seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(merge_seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + NoLegend() + plot2 + NoLegend()
# Using celldex and SingleR packages.
# Download reference data from celldex.
reference <- HumanPrimaryCellAtlasData()
# Convert Seurat object into a SingleCellExperiment Object for SingleR input.
merged.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# Anotate using raw counts.
SingleR.annotation <- SingleR(test = run2.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, num.threads = detectCores())
merge_seurat_object[["cell.labels"]] <- SingleR.annotation$labels
# Using celldex and SingleR packages.
# Download reference data from celldex.
reference <- HumanPrimaryCellAtlasData()
# Convert Seurat object into a SingleCellExperiment Object for SingleR input.
merged.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# Anotate using raw counts.
SingleR.annotation <- SingleR(test = merged.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, num.threads = detectCores())
merge_seurat_object[["cell.labels"]] <- SingleR.annotation$labels
DimPlot(merge_seurat_object, reduction = "umap", group.by = "cell.labels", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
clusters <- merge_seurat_object@meta.data[["seurat_clusters"]]
clusters <- as.character(levels(clusters)[clusters])
# Obtaining a vector containing the cluster of each cell in order.
# Get the factor contained in the SeuratObject with all this information.
clusters <- merge_seurat_object@meta.data[["seurat_clusters"]]
# The cluster information for each cell is contain as a factor which levels coincide with the total number of clusters found by FindClusters(). An approach to transform this factor into a character vector is the following:
# Obtain the list of clusters with levels(clusters). This outputs a character vector containing the levles of the factor. After that, we use the factor itself as an index to access the levels vector. When using a factor as an index, R does not use the labels itself (which in this case are string, so if used as indexes would cause an error), but the internal numeric index the factor contains. That way, for each cluster label assosiated with a cell in the factor, we access its numeric index and map it to the levels vectors (which coincides), thus obteinin each cell label as an unique character value. Each cell label is then storage as a character (the as.character is added as a control method since SingleR only admits strings as labels) in a vector. The vector contains the cluster label for each cell as a character value in the same order as each cell appears in the dataset, so the by-cluster annotation doesn't assing the cells to an incorrect cluster.
clusters <- as.character(levels(clusters)[clusters])
# reference <- HumanPrimaryCellAtlasData()
run2.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# We input the cluster vector using the clusters parameter.
SingleR.annotation <- SingleR(test = run2.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, clusters = clusters, num.threads = detectCores())
merge_seurat_object[["cluster.labels"]] <- SingleR.annotation$labels
# We composite the cluster name. That way when 2 clusters name are the same Seurat doesn't merge the labels.
# Get clusters levels accesing the SeuratObject variable as a df and then accesing the df as a column.
cluster_number <- levels(merge_seurat_object[["seurat_clusters"]][1, ])
# Get annotation labels.
cluster_annotation <- SingleR.annotation$labels
# Since cluster levels and labels are in the same order, we composite the new names using paste0 (sort of equivalent to fstrings in python).
new.clusters.ids <- paste0(cluster_number, "-", cluster_annotation)
# Add names to each value of the clusters id vector so Seurat can take it as a valid input for RenameIdents.
names(new.clusters.ids) <- levels(merge_seurat_object)
merge_seurat_object <- RenameIdents(merge_seurat_object, new.clusters.ids)
DimPlot(merge_seurat_object, reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
colnames(merge_seurat_object@meta.data)
merge_seurat_object@meta.data[1,]
sample_id = "CaPBi-23-21-S"
seurat_metadata <- merge_seurat_object@meta.data %>% filter(Sample_Name = sample_id)
seurat_metadata <- merge_seurat_object@meta.data %>% dplyr::filter(Sample_Name = sample_id)
seurat_metadata <- merge_seurat_object@meta.data %>% dplyr::filter(Sample_Name == sample_id)
seurat_sample_metadata <- merge_seurat_object@meta.data %>% dplyr::filter(Sample_Name == sample_id)
View(seurat_sample_metadata)
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(dplyr)
library(patchwork)
library(sctransform)
library(ggplot2)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(parallel) # detectCores()
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = detectCores())
run_dirs <- list.dirs("../Output",recursive = FALSE)
run_dirs <- run_dirs[grepl("run",run_dirs)]
rds_objects <- lapply(run_dirs, function(x){
rds_file <- list.files(path = x, pattern = "*rds",full.names = T)
if (length(rds_file) > 0){
rds_object <- readRDS(rds_file)
rds_object@meta.data$orig.ident <- basename(x)
return(rds_object)
} else{
return(NULL)
}
})
rds_objects[sapply(rds_objects, is.null)] <- NULL
merge_seurat_object <- Reduce(function(x,y) merge(x,y,add.cell.ids = c(x@project.name,y@project.name)) , rds_objects)
# check that the size is correct
for (rds_object in rds_objects){
print(dim(rds_object))
}
print(dim(merge_seurat_object))
# remove run objects
rm(rds_object, rds_objects, run_dirs)
# launch sct transform, runpca, runumap and so on
merge_seurat_object <- SCTransform(merge_seurat_object, vst.flavor = "v2", vars.to.regress = c("percent.mt","orig.ident"))
merge_seurat_object <- RunPCA(merge_seurat_object, assay = "SCT")
Idents(merge_seurat_object) <- "orig.ident"
DimPlot(merge_seurat_object, reduction = "pca") # Looks good!. There is no batch effects between runs!
ElbowPlot(merge_seurat_object, ndims = 50) # choose 30
DimHeatmap(merge_seurat_object, dims = 1:30, balanced = TRUE)
VizDimLoadings(merge_seurat_object, dims = 1:30, reduction = "pca")
# Resolution fine-tuned in a separate Rmd.
merge_seurat_object <- FindNeighbors(merge_seurat_object, dims = 1:30)
merge_seurat_object <- FindClusters(merge_seurat_object, resolution = 0.8) # Default resolution = 0.8
merge_seurat_object <- RunUMAP(merge_seurat_object, dims = 1:30)
DimPlot(merge_seurat_object, reduction = "umap", label = TRUE) # 23 clusters
# Visualize QC metrics as a violin plot
VlnPlot(merge_seurat_object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) + NoLegend()
# Zoom in on nFeature_RNA violin plot.
VlnPlot(merge_seurat_object, features = "nFeature_RNA", ncol = 1) + ylim(0, 2500) + NoLegend()
# Visualize relationships in metadata to detect outliers with FeatureScatter function
plot1 <- FeatureScatter(merge_seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(merge_seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + NoLegend() + plot2 + NoLegend()
# Using celldex and SingleR packages.
# Download reference data from celldex.
reference <- HumanPrimaryCellAtlasData()
# Convert Seurat object into a SingleCellExperiment Object for SingleR input.
merged.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# Anotate using raw counts.
SingleR.annotation <- SingleR(test = merged.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, num.threads = detectCores())
merge_seurat_object[["cell.labels"]] <- SingleR.annotation$labels
DimPlot(merge_seurat_object, reduction = "umap", group.by = "cell.labels", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
clusters <- merge_seurat_object@meta.data[["seurat_clusters"]]
clusters <- as.character(levels(clusters)[clusters])
# Obtaining a vector containing the cluster of each cell in order.
# Get the factor contained in the SeuratObject with all this information.
clusters <- merge_seurat_object@meta.data[["seurat_clusters"]]
# The cluster information for each cell is contain as a factor which levels coincide with the total number of clusters found by FindClusters(). An approach to transform this factor into a character vector is the following:
# Obtain the list of clusters with levels(clusters). This outputs a character vector containing the levles of the factor. After that, we use the factor itself as an index to access the levels vector. When using a factor as an index, R does not use the labels itself (which in this case are string, so if used as indexes would cause an error), but the internal numeric index the factor contains. That way, for each cluster label assosiated with a cell in the factor, we access its numeric index and map it to the levels vectors (which coincides), thus obteinin each cell label as an unique character value. Each cell label is then storage as a character (the as.character is added as a control method since SingleR only admits strings as labels) in a vector. The vector contains the cluster label for each cell as a character value in the same order as each cell appears in the dataset, so the by-cluster annotation doesn't assing the cells to an incorrect cluster.
clusters <- as.character(levels(clusters)[clusters])
# reference <- HumanPrimaryCellAtlasData()
run2.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# We input the cluster vector using the clusters parameter.
SingleR.annotation <- SingleR(test = run2.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, clusters = clusters, num.threads = detectCores())
merge_seurat_object[["cluster.labels"]] <- SingleR.annotation$labels
# We composite the cluster name. That way when 2 clusters name are the same Seurat doesn't merge the labels.
# Get clusters levels accesing the SeuratObject variable as a df and then accesing the df as a column.
cluster_number <- levels(merge_seurat_object[["seurat_clusters"]][1, ])
# Get annotation labels.
cluster_annotation <- SingleR.annotation$labels
# Since cluster levels and labels are in the same order, we composite the new names using paste0 (sort of equivalent to fstrings in python).
new.clusters.ids <- paste0(cluster_number, "-", cluster_annotation)
# Add names to each value of the clusters id vector so Seurat can take it as a valid input for RenameIdents.
names(new.clusters.ids) <- levels(merge_seurat_object)
merge_seurat_object <- RenameIdents(merge_seurat_object, new.clusters.ids)
new.clusters.ids
merge_seurat_object,
colnames(merge_seurat_object@meta.data)
merge_seurat_object@meta.data[1,]
new.clusters.ids
merge_seurat_object
# Using celldex and SingleR packages.
# Download reference data from celldex.
reference <- HumanPrimaryCellAtlasData()
# Convert Seurat object into a SingleCellExperiment Object for SingleR input.
merged.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# Anotate using raw counts.
SingleR.annotation <- SingleR(test = merged.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, num.threads = detectCores())
SingleR.annotation$labels
merge_seurat_object[["cell.labels"]]
merge_seurat_object[["cell.labels"]] <- SingleR.annotation$labels
DimPlot(merge_seurat_object, reduction = "umap", group.by = "cell.labels", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
clusters <- merge_seurat_object@meta.data[["seurat_clusters"]]
clusters <- as.character(levels(clusters)[clusters])
clusters <- merge_seurat_object@meta.data[["seurat_clusters"]]
clusters <- as.character(levels(clusters)[clusters])
merged.SCexp <- as.SingleCellExperiment(merge_seurat_object)
# We input the cluster vector using the clusters parameter.
SingleR.annotation <- SingleR(test = merged.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, clusters = clusters, num.threads = detectCores())
SingleR.annotation$labels
merge_seurat_object[["cluster.labels"]] <- SingleR.annotation$labels
DimPlot(merge_seurat_object, reduction = "umap", group.by = "cluster.labels", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
cluster_number <- levels(merge_seurat_object[["seurat_clusters"]][1, ])
# Get annotation labels.
cluster_annotation <- SingleR.annotation$labels
# Since cluster levels and labels are in the same order, we composite the new names using paste0 (sort of equivalent to fstrings in python).
new.clusters.ids <- paste0(cluster_number, "-", cluster_annotation)
levels(merge_seurat_object)
names(new.clusters.ids)
# Add names to each value of the clusters id vector so Seurat can take it as a valid input for RenameIdents.
names(new.clusters.ids) <- levels(merge_seurat_object)
merge_seurat_object <- RenameIdents(merge_seurat_object, new.clusters.ids)
Idents(merge_seurat_object)
merge_seurat_object
DimPlot(merge_seurat_object, reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
Idents(merge_seurat_object)
merge_seurat_object[["cell.cluster.labels"]] <- Idents(merge_seurat_object)
merge_seurat_object@meta.data[1,]
sample_id <- "CaPBi-23-21-S"
seurat_sample_metadata <- merge_seurat_object@meta.data %>% dplyr::filter(Sample_Name == sample_id)
group_by(Sample_Name) %>%
summarise(n = n())
merge_seurat_object@meta.data %>% group_by(Sample_Name) %>%
summarise(n = n())
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name) %>%
summarise(n = n())
View(prop_cell_by_sample)
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n())
View(prop_cell_by_sample)
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n))
View(prop_cell_by_sample)
sum(prop_cell_by_sample[prop_cell_by_sample$Sample_Name == sample_id,"freq"])
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group))
View(prop_cell_by_sample)
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
View(prop_cell_by_sample)
View(prop_cell_by_sample)
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels)
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels)+
geom_violin(aes(fill = Sample_Group))
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free")+
geom_violin(aes(fill = Sample_Group))
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free")+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.5,"in"))
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free")+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free")+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", ncol = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_violin(aes(fill = Sample_Group))+
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_boxplot(aes(fill = Sample_Group), outlier.shape = NA)+
geom_jitter(aes(color = Sample_Group), alpha = 0.5)
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_boxplot(aes(fill = Sample_Group), outlier.shape = NA)+
geom_jitter(aes(color = Sample_Group), alpha = 0.5) +
theme_minimal()+
theme(legend.key.size = unit(0.1,"in"))
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 24)+
geom_boxplot(aes(fill = Sample_Group), outlier.shape = NA)+
geom_jitter(aes(color = Sample_Group), alpha = 0.5) +
theme_minimal()+
theme(legend.position = "none")
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 12)+
geom_boxplot(aes(fill = Sample_Group), outlier.shape = NA)+
geom_jitter(aes(color = Sample_Group), alpha = 0.5) +
theme_minimal()+
theme(legend.position = "none")
prop_cell_by_sample <- merge_seurat_object@meta.data %>% group_by(Sample_Name, cell.cluster.labels) %>%
summarise(n = n()) %>% ungroup() %>% group_by(Sample_Name) %>%
mutate(freq = n / sum(n)) %>%
left_join(merge_seurat_object@meta.data %>% select(Sample_Name, Sample_Group) %>% unique())
ggplot(prop_cell_by_sample, aes(x = Sample_Group, y = freq))+
facet_wrap(~cell.cluster.labels, scales = "free", nrow = 12)+
geom_boxplot(aes(fill = Sample_Group), outlier.shape = NA, alpha = 0.5)+
geom_jitter(aes(color = Sample_Group)) +
theme_minimal()+
theme(legend.position = "none")
