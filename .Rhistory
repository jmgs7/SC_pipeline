# If there is something in the directory list...
if (length(rds_file) > 0){
rds_object <- readRDS(rds_file) # Load the RDS object in to a list.
rds_object@meta.data$orig.ident <- basename(x) # Add the original path in the metadata to keep track of data.
return(rds_object) # Return the list of RDS object and...
} else {
return(NULL) # If the directory list is empty return null.
}
}
)
# sapply is similar to lapply but returns a vector of the same lenght instead of the same element as the input (i.e. lapply returns a list is input is a list, but sapply always returns a vector).
rds_objects[sapply(rds_objects, is.null)] <- NULL # Filter emtpy objects.
# Reduce() allows to reduce a list of values into a single value by applying a binary operation over then iteratively. That is, takes the first two elements of a list, x and y, apply a the function (fun(x,y)) creating the reduced value a, then takes the third element of the list, z, and apply the function to c and z: fun(c, z) and so on till the whole list is reduce to one single value. In this case, we apply Seruat's merge to merge all objects sequentially into one single SeuratObject for the whole data set.
# add.cell.ids = add the project name to each specific run to its cells.
SCP_data <- Reduce(function(x,y) merge(x,y, add.cell.ids = c(x@project.name,y@project.name)), rds_objects)
# check that the size is correct
for (rds_object in rds_objects){
print(dim(rds_object))
}
print(dim(SCP_data))
# remove run objects
rm(rds_object, rds_objects, run_dirs)
saveRDS(SCP_data, file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Zoom in on nFeature_RNA violin plot.
VlnPlot(SCP_data, features = "nFeature_RNA", ncol = 1) + ylim(0, 2500) + NoLegend()
# Zoom in on nCount_RNA violin plot.
VlnPlot(SCP_data, features = "nCount_RNA", ncol = 1) + ylim(0, 25000) + NoLegend()
# Visualize relationships in metadata to detect outliers with FeatureScatter function
plot1 <- FeatureScatter(SCP_data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatterGradient(SCP_data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", gradient = "percent.mt", upper.limit = 100, scale.colors = "viridis")
plot1 + plot2
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = "nFeature_RNA", group.by = "Sample_Name") + NoLegend()
VlnPlot(SCP_data, features = "nCount_RNA", group.by = "Sample_Name") + NoLegend()
VlnPlot(SCP_data, features = "percent.mt", group.by = "Sample_Name") + NoLegend()
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name != low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name != low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name != low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
low_cells <- cells_per_sample %>% filter(Cells<100)
low_cells <- low_cells&Sample_Name
SCP_data <- subset(SCP_data, Sample_Name != low_cells)
View(low_cells)
low_cells <- cells_per_sample %>% filter(Cells<100)
low_cells <- low_cells$Sample_Name
SCP_data <- subset(SCP_data, Sample_Name != low_cells)
low_cells
low_cells <- cells_per_sample %>% filter(Cells<100)
low_cells <- low_cells$Sample_Name
SCP_data <- subset(SCP_data, Sample_Name != low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
low_cells <- cells_per_sample %>% filter(Cells<100)
low_cells <- low_cells$Sample_Name
SCP_data <- subset(SCP_data, Sample_Name != "CaPBi-23-17-S")
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
low_cells <- cells_per_sample %>% filter(Cells<100)
low_cells <- low_cells$Sample_Name
SCP_data <- subset(SCP_data, Sample_Name != "CaPBi-23-17-S" | Sample_Name != "CaPBi-23-35-T" | Sample_Name != "CaPBi-23-37-S")
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100)
low_cells <- low_cells$Sample_Name
SCP_data <- subset(SCP_data, Sample_Name != "CaPBi-23-17-S" | Sample_Name != "CaPBi-23-35-T" | Sample_Name != "CaPBi-23-37-S")
SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells>100)
low_cells <- low_cells$Sample_Name
SCP_data <- subset(SCP_data, Sample_Name == low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name == low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
SCP_data_raw <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
cells_per_sample <- SCP_data_raw@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data_raw, Sample_Name != low_cells)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
sum(cells_per_sample$Cells)
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name == low_cells) %>% summarise(Cells = n())
View(cells_per_sample)
SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name == low_cells) %>% summarise(Cells = n())
View(test)
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
low_cells
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name == "CaPBi-23-17-S") %>% summarise(Cells = n())
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name != "CaPBi-23-17-S") %>% summarise(Cells = n())
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name != low_cells) %>% summarise(Cells = n())
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name in low_cells) %>% summarise(Cells = n())
low_cells <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
test <- SCP_data@meta.data %>% group_by(Sample_Name) %>% filter(Sample_Name %in% low_cells) %>% summarise(Cells = n())
lowCellsSamples <- cells_per_sample %>% filter(Cells<100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, !(Sample_Name %in% lowCellsSamples))
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
filteredSamples <- cells_per_sample %>% filter(Cells>=100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name %in% filteredSamples)
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
SCP_data
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
# List the data directory.
run_dirs <- list.dirs("../Data",recursive = FALSE)
# Filter only the run folders.
# Grepl stands for "logical grep" so it only outputs TRUE or FALSE. It accepts an array of strings as an input, search for teh given pattern and returns another array with TRUE or FALSE if the pattern matches with the string in that position of the array.
run_dirs <- run_dirs[grepl("run",run_dirs)]
# lapply stands for "list apply", and allows to apply a certain function over all elements of an array: lapply(X, FUN). You can apply an R-defined function or create you own as shown belox.
rds_objects <- lapply(X = run_dirs, FUN = function(x) {
rds_file <- list.files(path = x, pattern = "*_filtered.rds",full.names = T) # For each run directory list the filtered RDS object.
# If there is something in the directory list...
if (length(rds_file) > 0){
rds_object <- readRDS(rds_file) # Load the RDS object in to a list.
rds_object@meta.data$orig.ident <- basename(x) # Add the original path in the metadata to keep track of data.
return(rds_object) # Return the list of RDS object and...
} else {
return(NULL) # If the directory list is empty return null.
}
}
)
# sapply is similar to lapply but returns a vector of the same lenght instead of the same element as the input (i.e. lapply returns a list is input is a list, but sapply always returns a vector).
rds_objects[sapply(rds_objects, is.null)] <- NULL # Filter emtpy objects.
# Reduce() allows to reduce a list of values into a single value by applying a binary operation over then iteratively. That is, takes the first two elements of a list, x and y, apply a the function (fun(x,y)) creating the reduced value a, then takes the third element of the list, z, and apply the function to c and z: fun(c, z) and so on till the whole list is reduce to one single value. In this case, we apply Seruat's merge to merge all objects sequentially into one single SeuratObject for the whole data set.
# add.cell.ids = add the project name to each specific run to its cells.
SCP_data <- Reduce(function(x,y) merge(x,y, add.cell.ids = c(x@project.name,y@project.name)), rds_objects)
# check that the size is correct
for (rds_object in rds_objects){
print(dim(rds_object))
}
print(dim(SCP_data))
# remove run objects
rm(rds_object, rds_objects, run_dirs)
saveRDS(SCP_data, file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
# SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Zoom in on nFeature_RNA violin plot.
VlnPlot(SCP_data, features = "nFeature_RNA", ncol = 1) + ylim(0, 2500) + NoLegend()
# Zoom in on nCount_RNA violin plot.
VlnPlot(SCP_data, features = "nCount_RNA", ncol = 1) + ylim(0, 25000) + NoLegend()
# Visualize relationships in metadata to detect outliers with FeatureScatter function
plot1 <- FeatureScatter(SCP_data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatterGradient(SCP_data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", gradient = "percent.mt", upper.limit = 100, scale.colors = "viridis")
plot1 + plot2
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = "nFeature_RNA", group.by = "Sample_Name") + NoLegend()
VlnPlot(SCP_data, features = "nCount_RNA", group.by = "Sample_Name") + NoLegend()
VlnPlot(SCP_data, features = "percent.mt", group.by = "Sample_Name") + NoLegend()
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
filteredSamples <- cells_per_sample %>% filter(Cells>=100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name %in% filteredSamples)
SCP_data
# The split method splits the given slot according to the indicated information.
SCP_data[["RNA"]] <- split(SCP_data[["RNA"]], f = SCP_data$orig.ident)
# Standard normalization.
SCP_data <- NormalizeData(SCP_data, scale.factor = 1e6, assay = "RNA") # scale.factor = 1e6 means we are using CPMs.
SCP_data <- FindVariableFeatures(SCP_data, nfeatures = 3000, assay = "RNA")
SCP_data <- ScaleData(SCP_data, assay = "RNA", vars.to.regress = "percent.mt") # regress out % mito.
# Run PCA.
SCP_data <- RunPCA(SCP_data, assay = "RNA")
# Integration.
SCP_data <- IntegrateLayers(
object = SCP_data, method = HarmonyIntegration,
verbose = FALSE
)
Idents(SCP_data) <- "orig.ident"
DimPlot(SCP_data, reduction = "pca")
ElbowPlot(SCP_data, ndims = 50) # choose 20
JackStraw(SCP_data, reduction = "pca", assay = "RNA", dims = 50)
JackStrawPlot(SCP_data, reduction = "pca", dims = 1:50)
DimHeatmap(SCP_data, dims = 1:20, balanced = TRUE)
VizDimLoadings(SCP_data, dims = 1:20, reduction = "pca")
resolutions = c(0.1, 0.5, 1)
# Resolution fine-tuned in a separate Rmd.
SCP_data <- FindNeighbors(SCP_data, dims = 1:20, reduction = "harmony")
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
# List the data directory.
run_dirs <- list.dirs("../Data",recursive = FALSE)
# Filter only the run folders.
# Grepl stands for "logical grep" so it only outputs TRUE or FALSE. It accepts an array of strings as an input, search for teh given pattern and returns another array with TRUE or FALSE if the pattern matches with the string in that position of the array.
run_dirs <- run_dirs[grepl("run",run_dirs)]
# lapply stands for "list apply", and allows to apply a certain function over all elements of an array: lapply(X, FUN). You can apply an R-defined function or create you own as shown belox.
rds_objects <- lapply(X = run_dirs, FUN = function(x) {
rds_file <- list.files(path = x, pattern = "*_filtered.rds",full.names = T) # For each run directory list the filtered RDS object.
# If there is something in the directory list...
if (length(rds_file) > 0){
rds_object <- readRDS(rds_file) # Load the RDS object in to a list.
rds_object@meta.data$orig.ident <- basename(x) # Add the original path in the metadata to keep track of data.
return(rds_object) # Return the list of RDS object and...
} else {
return(NULL) # If the directory list is empty return null.
}
}
)
# sapply is similar to lapply but returns a vector of the same lenght instead of the same element as the input (i.e. lapply returns a list is input is a list, but sapply always returns a vector).
rds_objects[sapply(rds_objects, is.null)] <- NULL # Filter emtpy objects.
# Reduce() allows to reduce a list of values into a single value by applying a binary operation over then iteratively. That is, takes the first two elements of a list, x and y, apply a the function (fun(x,y)) creating the reduced value a, then takes the third element of the list, z, and apply the function to c and z: fun(c, z) and so on till the whole list is reduce to one single value. In this case, we apply Seruat's merge to merge all objects sequentially into one single SeuratObject for the whole data set.
# add.cell.ids = add the project name to each specific run to its cells.
SCP_data <- Reduce(function(x,y) merge(x,y, add.cell.ids = c(x@project.name,y@project.name)), rds_objects)
# check that the size is correct
for (rds_object in rds_objects){
print(dim(rds_object))
}
print(dim(SCP_data))
# remove run objects
rm(rds_object, rds_objects, run_dirs)
saveRDS(SCP_data, file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
# SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_raw.rds")
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Zoom in on nFeature_RNA violin plot.
VlnPlot(SCP_data, features = "nFeature_RNA", ncol = 1) + ylim(0, 2500) + NoLegend()
# Zoom in on nCount_RNA violin plot.
VlnPlot(SCP_data, features = "nCount_RNA", ncol = 1) + ylim(0, 25000) + NoLegend()
# Visualize relationships in metadata to detect outliers with FeatureScatter function
plot1 <- FeatureScatter(SCP_data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatterGradient(SCP_data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", gradient = "percent.mt", upper.limit = 100, scale.colors = "viridis")
plot1 + plot2
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = "nFeature_RNA", group.by = "Sample_Name") + NoLegend()
VlnPlot(SCP_data, features = "nCount_RNA", group.by = "Sample_Name") + NoLegend()
VlnPlot(SCP_data, features = "percent.mt", group.by = "Sample_Name") + NoLegend()
cells_per_sample <- SCP_data@meta.data %>% group_by(Sample_Name) %>% summarise(Cells = n())
cells_per_sample
ggplot(cells_per_sample, aes(x=Sample_Name, y=Cells, fill = Sample_Name)) +
geom_bar(stat = "identity", color = "black") +
geom_hline(aes(yintercept=100), linetype="dashed", color="black") +
theme_classic() +
theme(legend.position="none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)
)
filteredSamples <- cells_per_sample %>% filter(Cells>=100) %>% select(Sample_Name) %>% unlist(.)
SCP_data <- subset(SCP_data, Sample_Name %in% filteredSamples)
SCP_data
# The split method splits the given slot according to the indicated information.
SCP_data[["RNA"]] <- split(SCP_data[["RNA"]], f = SCP_data$orig.ident)
# Standard normalization.
SCP_data <- NormalizeData(SCP_data, scale.factor = 1e6, assay = "RNA") # scale.factor = 1e6 means we are using CPMs.
SCP_data <- FindVariableFeatures(SCP_data, nfeatures = 3000, assay = "RNA")
SCP_data <- ScaleData(SCP_data, assay = "RNA", vars.to.regress = "percent.mt") # regress out % mito.
# Run PCA.
SCP_data <- RunPCA(SCP_data, assay = "RNA")
# Integration.
SCP_data <- IntegrateLayers(
object = SCP_data, method = HarmonyIntegration,
verbose = FALSE
)
Idents(SCP_data) <- "orig.ident"
DimPlot(SCP_data, reduction = "pca")
ElbowPlot(SCP_data, ndims = 50) # choose 20
DimHeatmap(SCP_data, dims = 1:20, balanced = TRUE)
VizDimLoadings(SCP_data, dims = 1:20, reduction = "pca")
resolutions = c(0.1, 0.5, 1)
# Resolution fine-tuned in a separate Rmd.
SCP_data <- FindNeighbors(SCP_data, dims = 1:20, reduction = "harmony")
SCP_data <- FindClusters(SCP_data, resolution =  resolutions) # Default resolution = 0.8
SCP_data <- RunUMAP(SCP_data, dims = 1:20, reduction = "harmony")
# Visualize QC metrics as a violin plot
VlnPlot(SCP_data, features = "nFeature_RNA") + NoLegend()
VlnPlot(SCP_data, features = "nCount_RNA") + NoLegend()
VlnPlot(SCP_data, features = "percent.mt") + NoLegend()
# Zoom in on nFeature_RNA violin plot.
VlnPlot(SCP_data, features = "nFeature_RNA", ncol = 1) + ylim(0, 2500) + NoLegend()
# Visualize relationships in metadata to detect outliers with FeatureScatter function
plot1 <- FeatureScatter(SCP_data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(SCP_data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + NoLegend() + plot2 + NoLegend()
# Using celldex and SingleR packages.
# Download reference data from celldex.
reference <- HumanPrimaryCellAtlasData()
# Join layers before conversion. SingleR uses the RNA assay.
merged.SCexp <- JoinLayers(SCP_data, assay = "RNA")
# Convert Seurat object into a SingleCellExperiment Object for SingleR input.
merged.SCexp <- as.SingleCellExperiment(merged.SCexp)
SingleR.annotation <- SingleR(test = merged.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, num.threads = parallel::detectCores())
SCP_data[["cell.labels"]] <- SingleR.annotation$labels
DimPlot(SCP_data, reduction = "umap", group.by = "cell.labels", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
# Obtaining a vector containing the cluster of each cell in order.
# Get the factor contained in the SeuratObject with all this information.
clusters <- SCP_data@meta.data[["seurat_clusters"]]
# The cluster information for each cell is contain as a factor which levels coincide with the total number of clusters found by FindClusters(). An approach to transform this factor into a character vector is the following:
# Obtain the list of clusters with levels(clusters). This outputs a character vector containing the levles of the factor. After that, we use the factor itself as an index to access the levels vector. When using a factor as an index, R does not use the labels itself (which in this case are string, so if used as indexes would cause an error), but the internal numeric index the factor contains. That way, for each cluster label associated with a cell in the factor, we access its numeric index and map it to the levels vectors (which coincides), thus obtaining each cell label as an unique character value. Each cell label is then storage as a character (the as.character is added as a control method since SingleR only admits strings as labels) in a vector. The vector contains the cluster label for each cell as a character value in the same order as each cell appears in the dataset, so the by-cluster annotation doesn't assign the cells to an incorrect cluster.
clusters <- as.character(levels(clusters)[clusters])
# reference <- HumanPrimaryCellAtlasData()
# # Join layers before conversion. SingleR uses the RNA assay.
# merged.SCexp <- JoinLayers(SCP_data, assay = "RNA")
# merged.SCexp <- as.SingleCellExperiment(SCP_data)
# We input the cluster vector using the clusters parameter.
SingleR.annotation <- SingleR(test = merged.SCexp, ref = reference, assay.type.test = "logcounts", labels = reference$label.main, clusters = clusters, num.threads = parallel::detectCores())
SCP_data[["cluster.labels"]] <- SingleR.annotation$labels
# We composite the cluster name. That way when 2 clusters' names are the same Seurat doesn't merge the labels.
# Get clusters levels accessing the SeuratObject variable as a df and then accessing the df as a column.
cluster_number <- levels(SCP_data[["seurat_clusters"]][1, ])
# Get annotation labels.
cluster_annotation <- SingleR.annotation$labels
# Since cluster levels and labels are in the same order, we composite the new names using paste0 (sort of equivalent to fstrings in python).
new.clusters.ids <- paste0(cluster_number, "-", cluster_annotation)
# Add names to each value of the clusters id vector so Seurat can take it as a valid input for RenameIdents.
names(new.clusters.ids) <- levels(SCP_data)
SCP_data <- RenameIdents(SCP_data, new.clusters.ids)
SCP_data[["cell.cluster.labels"]] <- Idents(SCP_data)
DimPlot(SCP_data, reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
saveRDS(SCP_data, file = "~/Documents/SC_Prostate/Data/SC_Prostate_processed.rds")
sessionInfo()
RNGkind()
View(SCP_data)
