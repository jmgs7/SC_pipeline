echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(ggplot2)
library(ggrepel)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(ggplot2)
library(ggrepel)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_processed.rds")
SCP_data <- JackStraw(SCP_data, reduction = "pca", assay = "RNA", dims = 30, prop.freq = 0.01, num.replicate = 100, maxit = 1000) # Using defaults.
SCP_data <- ScoreJackStraw(SCP_data, dims = 1:30, score.thresh = 1e-05, do.plot = TRUE) # Using defaults.
SCP_data <- JackStrawPlot(SCP_data, reduction = "pca", dims = 1:30)
BiocManager::install("clustifyr")
BiocManager::install("clustifyr")
BiocManager::install("clustifyr")
remove.packages("BiocManager")
BiocManager::install()
BiocManager::install(version = "3.19")
BiocManager::install("clustifyr")
BiocManager::install("clustifyr")
BiocManager::install(version = 3.19)
BiocManager::install(version=3.19)
BiocManager::install(version="3.19")
install.packages(""clustifyr"")
install.packages("clustifyr")
BiocManager::install(version="3.19")
remove.packages("BiocManager")
BiocManager::install(version="3.19", "clustifyr")
BiocManager::install(version="3.19")
BiocManager::install(version="3.19")
BiocManager::install("clustifyr")
BiocManager::install("clustifyr")
BiocManager::install("clustifyr")
BiocManager::install()
BiocManager::install(version = 3.19)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", version=3.19)
BiocManager::install(version = 3.19)
BiocManager::install(version="3.19")
BiocManager::install("clustifyr")
BiocManager::install(version="3.19")
BiocManager::install("clustifyr")
install.packages("clustifyr")
library("clustifyr")
BiocManager::install("clustifyr")
BiocManager::install("rnabioco/clustifyr")
remotes::install_github("rnabioco/clustifyr")
remotes::update_packages()
library(clustifyr)
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(dplyr)
library(ggplot2)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
library(scDblFinder)
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
run1.raw <- readRDS("~/Documents/SC_Prostate/Data/run1/C1_expected.rds")
run1.raw$orig.ident <- "run1"
run1.raw <- SetIdent(run1.raw, value = run1.raw$orig.ident)
run1.raw
# Load information from .ods file
excel_data <- read_ods("~/Documents/SC_Prostate/Data/sample_info.ods")
# Specify the experiment you want to extract information for
target_run <- "run1"
# Filter Excel data for the specific experiment
filtered_excel_data <- excel_data %>%
filter(Run == target_run)
# Extract the numeric part from Sample Tag and convert it to integer
run1.raw$Sample_Tag_Number <- as.integer(gsub("\\D", "", run1.raw$Sample_Tag))
# Extract Sample Name and Sample Group based on Sample Tag information
run1.raw$Sample_Name <- filtered_excel_data$Sample_Name[match(run1.raw$Sample_Tag_Number, filtered_excel_data$Sample_Tag)]
run1.raw$Sample_Group <- filtered_excel_data$Sample_Group[match(run1.raw$Sample_Tag_Number, filtered_excel_data$Sample_Tag)]
run1.raw$Sample_Name_Group <- filtered_excel_data$Sample_Name_Group[match(run1.raw$Sample_Tag_Number, filtered_excel_data$Sample_Tag)]
run1.raw[["percent.mt"]] <- PercentageFeatureSet(run1.raw, pattern = "^MT-")
library(Seurat)
library(dplyr)
library(ggplot2)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
library(scDblFinder)
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
install.packages("celldex")
BiocManager::install("celldex")
library(Seurat)
library(dplyr)
library(ggplot2)
library(celldex) # Cell annotation.
library(SingleR) # Cell annotation.
library(future) # Allows parallelization in Seurat.
library(readODS) # Allows ods file import to add sample info
library(scDblFinder)
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores())
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/FeatureScatterGradient.R")
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
SCP_data <- readRDS(file = "~/Documents/SC_Prostate/Data/SC_Prostate_processed.rds")
library(Seurat)
library(future) # Allows parallelization in Seurat.
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores()) # Adjust threads for memory use.
# Adjust memory allocation per process.
options(future.globals.maxSize = 2500 * 1024^2) # 2.5 GB per thread
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/CalculateCellularDetectionRate.R")
# Join the per-run splitted layers.
SCP_data <- JoinLayers(SCP_data, assay = "RNA")
# Calculate Cell Detection Rate (CDR).
SCP_data <- CalculateCDR(SCP_data)
View(SCP_data)
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(fgsea)
library(dplyr)
library(ggplot2)
library(future) # Allows parallelization in Seurat.
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores()) # Adjust threads for memory use.
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/CalculateCellularDetectionRate.R")
run1.subset <- readRDS("~/Documents/SC_Prostate/Output/run1/run1_processed.rds")
DimPlot(run1.subset, reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
# Calculate Cell Detection Rate (CDR).
run1.subset <- CalculateCDR(run1.subset)
cluster_markers <- FindAllMarkers(object = run1.subset,
test.use = "MAST", # Use MAST as DE method.
latent.vars = "CDR", # Correct by CDR.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = FALSE,
min.pct = 0,
logfc.threshold = 0
)
cluster0 <- cluster_markers %>% filter(cluster == "0-T_cells") %>% arrange(-avg_log2FC) %>% select(c(gene, avg_log2FC)) %>% tibble::deframe()
reference_markers <- gmtPathways(gmt.file = "~/Documents/SC_Prostate/Data/cell_markers_GSEA.gmt")
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 0.05) %>% arrange(padj)
sessionInfo()
RNGkind()
MAST <- FindAllMarkers(object = run1.subset,
test.use = "MAST", # Use MAST as DE method.
latent.vars = "CDR", # Correct by CDR.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = TRUE,
min.pct = 0.9,
logfc.threshold = 1
)
Wilcox <- FindAllMarkers(object = run1.subset,
test.use = "wilcox", # Use wilcox as DE method.
latent.vars = "CDR", # Correct by CDR.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = TRUE,
min.pct = 0.9,
logfc.threshold = 1
)
View(MAST)
View(Wilcox)
all_times <- list() # store the time for each chunk
knitr::knit_hooks$set(time_it = local({
now <- NULL
function(before, options) {
if (before) {
now <<- Sys.time()
} else {
res <- difftime(Sys.time(), now, units = "secs")
all_times[[options$label]] <<- res
}
}
}))
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 95),
message = FALSE,
warning = FALSE,
time_it = TRUE,
error = TRUE,
echo = TRUE,
engine.opts = list(bash = "-l")
)
library(Seurat)
library(fgsea)
library(dplyr)
library(ggplot2)
library(future) # Allows parallelization in Seurat.
# Set up Seurat pararell computing.
options(parallelly.fork.enable = TRUE)
plan("multicore", workers = parallel::detectCores()) # Adjust threads for memory use.
# Import user's libraries.
source(file = "~/Documents/SC_Prostate/Scripts/SC_utils/CalculateCellularDetectionRate.R")
run1.subset <- readRDS("~/Documents/SC_Prostate/Output/run1/run1_processed.rds")
DimPlot(run1.subset, reduction = "umap", label = TRUE, repel = TRUE, label.size = 4) + theme(axis.title = element_text(size = 15), legend.text = element_text(size = 10), axis.text = element_text(size = 10)) + guides(colour = guide_legend(override.aes = list(size = 3)))
# Calculate Cell Detection Rate (CDR).
run1.subset <- CalculateCDR(run1.subset)
cluster_markers <- FindAllMarkers(object = run1.subset,
test.use = "wilcox", # Use wilcox as DE method as is very optimized with presto.
latent.vars = "CDR", # Correct by CDR.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = FALSE,
min.pct = 0,
logfc.threshold = 0
)
cluster0 <- cluster_markers %>% filter(cluster == "0-T_cells") %>% arrange(-avg_log2FC) %>% select(c(gene, avg_log2FC)) %>% tibble::deframe()
reference_markers <- gmtPathways(gmt.file = "~/Documents/SC_Prostate/Data/cell_markers_GSEA.gmt")
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 0.05) %>% arrange(padj)
sessionInfo()
RNGkind()
View(res)
View(cluster_markers)
View(run1.subset)
cluster_markers <- FindAllMarkers(object = run1.subset,
test.use = "wilcox", # Use wilcox as DE method as is very optimized with presto.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = FALSE,
min.pct = 0.5,
logfc.threshold = 0
)
cluster0 <- cluster_markers %>% filter(cluster == "0-T_cells") %>% arrange(-avg_log2FC) %>% select(c(gene, avg_log2FC)) %>% tibble::deframe()
reference_markers <- gmtPathways(gmt.file = "~/Documents/SC_Prostate/Data/cell_markers_GSEA.gmt")
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 0.05) %>% arrange(padj)
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 1e-6) %>% arrange(padj)
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 1e-6, NES > 0) %>% arrange(padj)
View(cluster_markers)
cluster_markers <- FindAllMarkers(object = run1.subset,
test.use = "wilcox", # Use wilcox as DE method as is very optimized with presto.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = FALSE,
min.pct = 0.5,
logfc.threshold = 0
)
cluster0 <- cluster_markers %>% filter(cluster == "0-T_cells") %>% arrange(-avg_log2FC) %>% select(c(gene, avg_log2FC)) %>% tibble::deframe()
reference_markers <- gmtPathways(gmt.file = "~/Documents/SC_Prostate/Data/cell_markers_GSEA.gmt")
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 1e-6, NES > 0) %>% arrange(NES)
View(res)
res <- fgsea(pathways = reference_markers, stats = cluster0, BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())) %>% filter(padj < 1e-6, NES > 0) %>% arrange(-NES)
View(res)
unique(cluster_markers$cluster)
levels(cluster_markers$cluster)
result <- list()
scGSEAmarkers <- function(cluster_markers, reference_markers) {
result <- list()
cluster_list <- levels(cluster_markers$cluster)
for (cluster in cluster_list) {
cluster_stat  <- cluster_markers %>%
filter(cluster == cluster) %>%
arrange(-avg_log2FC) %>%
select(c(gene, avg_log2FC)) %>%
tibble::deframe()
result[cluster]  <- fgsea(pathways = reference_markers,
stats = cluster_stat,
BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())
) %>% filter(padj < 1e-6, NES > 0)
%>% arrange(-NES)
}
return(result)
}
scGSEAmarkers <- function(cluster_markers, reference_markers) {
result <- list()
cluster_list <- levels(cluster_markers$cluster)
for (cluster in cluster_list) {
cluster_stat  <- cluster_markers %>%
filter(cluster == cluster) %>%
arrange(-avg_log2FC) %>%
select(c(gene, avg_log2FC)) %>%
tibble::deframe()
result[cluster]  <- fgsea(pathways = reference_markers,
stats = cluster_stat,
BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())
) %>% filter(padj < 1e-6, NES > 0) %>% arrange(-NES)
}
return(result)
}
result_list <- scGSEAmarkers(cluster_markers, reference_markers)
View(result)
View(result_list)
result_list[["0-T_cells"]]
result_list[1]
scGSEAmarkers <- function(cluster_markers, reference_markers) {
result <- list()
cluster_list <- levels(cluster_markers$cluster)
for (cluster in cluster_list) {
cluster_stat  <- cluster_markers %>%
filter(cluster == cluster) %>%
arrange(-avg_log2FC) %>%
select(c(gene, avg_log2FC)) %>%
tibble::deframe()
result[[cluster]]  <- fgsea(pathways = reference_markers,
stats = cluster_stat,
BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())
) %>% filter(padj < 1e-6, NES > 0) %>% arrange(-NES)
}
return(result)
}
result_list <- scGSEAmarkers(cluster_markers, reference_markers)
scGSEAmarkers <- function(cluster_markers, reference_markers) {
result <- list()
cluster_list <- levels(cluster_markers$cluster)
for (cluster in cluster_list) {
cluster_stats  <- cluster_markers %>%
filter(cluster == cluster) %>%
arrange(-avg_log2FC) %>%
select(c(gene, avg_log2FC)) %>%
tibble::deframe()
result[[cluster]]  <- fgsea(pathways = reference_markers,
stats = cluster_stats,
BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())
) %>% filter(padj < 1e-6, NES > 0) %>% arrange(-NES)
}
return(result)
}
cluster_filtered <- cluster_filtered %>% filter(cluster == "0-T_cells", "1-B_cell")
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
cluster_filtered <- cluster_markers %>% filter(cluster == "0-T_cells", "1-B_cell")
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
cluster_filtered <- cluster_markers %>% filter(cluster == "0-T_cells" | "1-B_cell")
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
cluster_filtered <- cluster_markers %>% filter(cluster == ("0-T_cells" | "1-B_cell"))
cluster_filtered <- cluster_markers %>% filter(cluster == c("0-T_cells", "1-B_cell"))
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
View(result_list)
View(cluster_filtered)
levels(cluster_filtered$cluster)
unique(cluster_filtered$cluster)
as.character(unique(cluster_filtered$cluster))
scGSEAmarkers <- function(cluster_markers, reference_markers) {
result <- list()
cluster_list <- as.character(unique(cluster_markers$cluster))
for (cluster in cluster_list) {
cluster_stats  <- cluster_markers %>%
filter(cluster == cluster) %>%
arrange(-avg_log2FC) %>%
select(c(gene, avg_log2FC)) %>%
tibble::deframe()
result[[cluster]]  <- fgsea(pathways = reference_markers,
stats = cluster_stats,
BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())
) %>% filter(padj < 1e-6, NES > 0) %>% arrange(-NES)
}
return(result)
}
cluster_filtered <- cluster_markers %>% filter(cluster == c("0-T_cells", "1-B_cell"))
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
scGSEAmarkers <- function(cluster_markers, reference_markers) {
result <- list()
cluster_list <- as.character(unique(cluster_markers$cluster))
for (cluster in cluster_list) {
cluster_stats  <- cluster_markers %>%
filter(cluster == cluster) %>%
arrange(-avg_log2FC) %>%
select(c(gene, avg_log2FC)) %>%
tibble::deframe()
result[[cluster]]  <- fgsea(pathways = reference_markers,
stats = cluster_stats,
BPPARAM = BiocParallel::MulticoreParam(workers=parallel::detectCores())
) %>% filter(padj < 1e-6, NES > 0) %>% arrange(-NES)
}
return(result)
}
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
result_list <- scGSEAmarkers(cluster_markers, reference_markers)
View(result_list)
result_list[["0-T_cells"]][["leadingEdge"]][[1]]
result_list[["1-B_cell"]][["leadingEdge"]][[1]]
result_list[1]
cluster_markers <- FindAllMarkers(object = run1.subset,
test.use = "wilcox", # Use wilcox as DE method as is very optimized with presto.
assay = "RNA",
slot = "data", # Use log-transformed CPMs.
# We need all genes for the enrichment analysis:
only.pos = FALSE,
min.pct = 0.5,
logfc.threshold = log2(1.5)
)
result_list <- scGSEAmarkers(cluster_markers, reference_markers)
View(res)
result_list[["0-T_cells"]][["pathway"]]
cluster_filtered
result_list <- debug(scGSEAmarkers(cluster_filtered, reference_markers))
debug(scGSEAmarkers)
debug(scGSEAmarkers)
deb <- debug(scGSEAmarkers)
debug(scGSEAmarkers)
result_list <- scGSEAmarkers(cluster_filtered, reference_markers)
